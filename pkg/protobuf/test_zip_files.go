// Copyright Â© 2019 tinyzimmer
//
// This file is part of protobuf-registry
//
// protobuf-registry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// protobuf-registry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with protobuf-registry.  If not, see <https://www.gnu.org/licenses/>.

package protobuf

// exports for API tests
var TestProtoZip = testProtoZip
var TestProtoDescriptorSet = descriptorSetBase64

var testProtoZip = `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`

var testProtoSha = "41f1fd242c299c8dad0531f0f9255bd2d607e8f7ad6f119846f434d957bbad34"

var testProtoMessageRawString = `/**
 * Testing documentation strings
 *
 * This file is really just an example. The data model is completely
 * fictional.
 */

syntax = "proto3";

option go_package = "registry.localhost/golang/test-protobuf";
option java_package = "com.example.test.data";
option java_outer_classname = "TestDataProtos";

import "details/TestProtoMessageDetails.proto";

/**
 * This is a leading test doc
*/
message TestProtoMessage {
    int32 messageId = 1; /// some message id
    int64 messageTime = 2; /// some message time
    TestProtoMessageDetails details = 3; /// details about the message
}
`

var descriptorSetBase64 = ``
